
buildscript {
    ext.kotlin_version = '1.4.10'
    ext.dashj_version = '0.18-SNAPSHOT'
    ext.dpp_version = '0.20-SNAPSHOT'
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}

plugins {
    id 'maven-publish'
    id 'maven'
    id 'signing'
}
apply plugin: 'kotlin'

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/'}
    }
}

group 'org.dashj.platform'
version ext.dpp_version

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'co.nstant.in:cbor:0.8'
    implementation "org.dashj:dashj-core:$dashj_version"
    implementation 'org.json:json:20190722'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testImplementation 'org.assertj:assertj-core:3.10.0'
}

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

publishing {
    tasks.withType(Sign)*.enabled = false
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

assemble.dependsOn(publishToMavenLocal)
assemble.dependsOn(sourcesJar)

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("publish") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.hasProperty('ossrhUsername')?project.findProperty('ossrhUsername'):'', password: project.hasProperty('ossrhPassword')?project.findProperty('ossrhPassword'):'')
            }

            pom.project {
                name 'DashJ X11'
                packaging 'jar'
                groupId 'org.dashj.platform'
                artifactId 'dpp'
                version project.findProperty('dpp_version')
                description 'Dash Platform Protocol Library'
                url 'https://github.com/dashevo/android-dpp'

                scm {
                    connection 'scm:svn:https://github.com/dashevo/android-dpp'
                    developerConnection 'scm:svn:https://github.com/dashevo/android-dpp'
                    url 'https://github.com/dashevo/android-dpp'
                }

                licenses {
                    license {
                        name 'MIT'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'hashengineering'
                        name 'HashEngineering'
                        email 'hashengineeringsolutions@gmail.com'
                    }
                }
            }
        }
    }
}